name: CI
#
# Workspace split strategy (IMPORTANT for newcomers):
# - The `strict-path` library enforces MSRV Rust 1.71 and is tested with `--locked`.
# - The `demos/` crate is intentionally NOT in the workspace so it can use
#   latest stable Rust and newer ecosystem crates without raising the library's MSRV.
# - Therefore this workflow runs two distinct tracks:
#     1) Stable track: format, clippy, docs, tests for the library; and build demos separately
#     2) MSRV track: check/clippy/test only the library (`-p strict-path --lib`) on Rust 1.71
# - This split avoids workspace lockfile/feature coupling while keeping demos rich and current.
#
# For local development with auto-fixing, use: bash ci-local.sh

on:
  push:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - uses: actions/checkout@v4
    
    - name: Validate file encodings
      shell: bash
      run: |
        echo "üîç Validating UTF-8 encoding for critical files..."

        check_with_file_cmd() {
          local f="$1"
          if ! [ -f "$f" ]; then
            echo "‚ùå File not found: $f"; return 1
          fi
          if command -v file >/dev/null 2>&1; then
            if file "$f" | grep -qE 'UTF-8|ASCII|text|[Ss]ource'; then
              echo "‚úÖ $f: UTF-8 encoding verified (file command)"
              return 0
            else
              echo "‚ùå $f is not UTF-8 encoded"; return 1
            fi
          fi
          return 0
        }

        # Critical files
        check_with_file_cmd README.md || exit 1
        # BOM check (optional best-effort)
        if command -v xxd >/dev/null 2>&1 && head -c 3 README.md | xxd | grep -qi efbbbf; then
          echo "‚ùå README.md contains UTF-8 BOM"; exit 1
        fi
        check_with_file_cmd Cargo.toml || exit 1

        # Source trees (existence-guarded)
        for dir in strict-path/src src demos/src; do
          if [ -d "$dir" ]; then
            while IFS= read -r -d '' f; do
              check_with_file_cmd "$f" || exit 1
            done < <(find "$dir" -type f -name '*.rs' -print0)
            echo "‚úÖ UTF-8 verified under $dir"
          fi
        done

        echo "üéâ All file encoding checks passed!"
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache cargo registry
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry/index/
          ~/.cargo/registry/cache/
          ~/.cargo/git/db/
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-

    - name: Cache cargo build
      uses: actions/cache@v4
      with:
        path: target/
        key: ${{ runner.os }}-cargo-build-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-build-

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Show formatting diff (if check failed)
      if: failure()
      run: |
        echo "‚ùå Formatting check failed. Run 'cargo fmt --all' to fix."
        echo "Here's what would be changed:"
        cargo fmt --all -- --check --verbose || true
        echo ""
        echo "To fix locally, run: cargo fmt --all"

    - name: Run clippy (all features)
      run: cargo clippy --all-targets --all-features -- -D warnings

    - name: Run clippy (no features)
      run: cargo clippy -p strict-path --all-targets --no-default-features -- -D warnings

    - name: Enforce doctest/lint suppression policy
      shell: bash
      run: |
        set -euo pipefail
        echo "üîé Scanning for forbidden patterns: #[allow(...)], no_run/ignore/should_panic in rustdoc fences, doctest:false"

        # Collect tracked files as NUL-delimited to handle spaces safely (bash 3.2 compatible)
        ALL_FILES=()
        while IFS= read -r -d '' f; do
          ALL_FILES+=("$f")
        done < <(git ls-files -z || printf '')

        # Build the list of Rust source files only (for #[allow(...)] and rustdoc fence checks)
        RUST_FILES=()
        for f in "${ALL_FILES[@]}"; do
          case "$f" in
            *.rs) RUST_FILES+=("$f") ;;
          esac
        done

        # Define manifests to check for doctest:false (limit scope to Cargo.toml files)
        MANIFESTS=()
        [ -f Cargo.toml ] && MANIFESTS+=("Cargo.toml")
        [ -f strict-path/Cargo.toml ] && MANIFESTS+=("strict-path/Cargo.toml")
        [ -f demos/Cargo.toml ] && MANIFESTS+=("demos/Cargo.toml")

        # 1) Block #[allow(...)] except a single whitelisted case: #[allow(clippy::type_complexity)]
        ALLOW_ANY='#[[:space:]]*\[[[:space:]]*allow[[:space:]]*\('
        ALLOW_WHITELIST='#[[:space:]]*\[[[:space:]]*allow[[:space:]]*\([[:space:]]*clippy::type_complexity[[:space:]]*\)'
        ALLOW_MATCHES=""
        if [ ${#RUST_FILES[@]} -gt 0 ]; then
          for f in "${RUST_FILES[@]}"; do
            out=$(grep -nE -H "$ALLOW_ANY" -- "$f" || true)
            [ -n "$out" ] && ALLOW_MATCHES+="${out}"$'\n'
          done
        fi
        ALLOW_VIOLATIONS=""
        if [ -n "$ALLOW_MATCHES" ]; then
          # Filter out the whitelisted exact form
          ALLOW_VIOLATIONS=$(echo "$ALLOW_MATCHES" | grep -Ev "$ALLOW_WHITELIST" || true)
        fi

        # 2) Block rustdoc skip flags in code fences (scan only .rs files)
        RUSTDOC_FORBIDDEN='```[[:space:]]*rust[^\n]*\b(no_run|ignore|should_panic)\b'
        RUSTDOC_MATCHES=""
        if [ ${#RUST_FILES[@]} -gt 0 ]; then
          for f in "${RUST_FILES[@]}"; do
            out=$(grep -nE -H "$RUSTDOC_FORBIDDEN" -- "$f" || true)
            [ -n "$out" ] && RUSTDOC_MATCHES+="${out}"$'\n'
          done
        fi

        # 3) Block doctest:false in Cargo manifests only
        DOCTEST_FALSE='doctest:[[:space:]]*false'
        DOCTEST_MATCHES=""
        if [ ${#MANIFESTS[@]} -gt 0 ]; then
          for f in "${MANIFESTS[@]}"; do
            out=$(grep -nE -H "$DOCTEST_FALSE" -- "$f" || true)
            [ -n "$out" ] && DOCTEST_MATCHES+="${out}"$'\n'
          done
        fi

        if [ -n "$ALLOW_VIOLATIONS" ] || [ -n "$RUSTDOC_MATCHES" ] || [ -n "$DOCTEST_MATCHES" ]; then
          echo "‚ùå Forbidden patterns found:"
          [ -n "$ALLOW_VIOLATIONS" ] && { echo "-- Disallowed #[allow(...)] occurrences (whitelist: #[allow(clippy::type_complexity)] only):"; echo "$ALLOW_VIOLATIONS"; }
          [ -n "$RUSTDOC_MATCHES" ] && { echo "-- Rustdoc fences with skip flags (no_run/ignore/should_panic):"; echo "$RUSTDOC_MATCHES"; }
          [ -n "$DOCTEST_MATCHES" ] && { echo "-- doctest:false occurrences (Cargo manifests only):"; echo "$DOCTEST_MATCHES"; }
          exit 1
        fi

        echo "‚úÖ No forbidden suppression patterns detected. Whitelisted: #[allow(clippy::type_complexity)] only. Scanned only .rs for macros/rustdoc; manifests for doctest:false."

    - name: Check formatting (demos)
      run: |
        cd demos
        cargo fmt --all -- --check

    - name: Show formatting diff (demos) if check failed
      if: failure()
      run: |
        echo "‚ùå Demos formatting check failed. Run 'cd demos && cargo fmt --all' to fix."
        echo "Here's what would be changed:"
        cd demos
        cargo fmt --all -- --check --verbose || true
        echo ""
        echo "To fix locally, run:"
        echo "  cd demos"
        echo "  cargo fmt --all"

    - name: Build examples (library)
      run: cargo build -p strict-path --examples --all-features

    - name: Clippy demos (all features)
      # Lint demos with all features at once - compile once, fail fast
      shell: bash
      run: |
        set -euo pipefail
        cd demos
        # Single combined test with all features
        ALL_FEATURES="with-zip,with-app-path,with-dirs,with-tempfile,with-aws,with-rmcp,virtual-path"
        echo "==> Clippy demos with features: ${ALL_FEATURES}"
        cargo clippy --all-targets --features "${ALL_FEATURES}" -- -D warnings

    - name: Show clippy fixes (if check failed)  
      if: failure()
      run: |
        echo "‚ùå Clippy check failed. Some issues might be auto-fixable."
        echo "To fix locally, run: cargo clippy --fix --allow-dirty --allow-staged --all-targets --all-features"
        echo "Then run: cargo clippy --all-targets --all-features -- -D warnings"

    - name: Run tests (latest stable, all features)
      # Run tests for the library with all features (serde, etc.). Demos build separately.
      run: cargo test -p strict-path --all-features

  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
    
    - name: Check documentation
      run: cargo doc --no-deps --document-private-items --all-features
      env:
        RUSTDOCFLAGS: -D warnings

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Install Rust 1.71
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.71.0
        components: clippy

    - name: Generate MSRV lockfile for strict-path
      # Only generate a lockfile for the library crate. Do NOT include demos.
      run: |
        echo "Generating Cargo.lock for strict-path using Rust 1.71.0"
        pushd strict-path
        rustup run 1.71.0 cargo generate-lockfile || true
        popd

    - name: Check library with MSRV
      # Scope to the library only, keep `--locked`, and use a separate target dir
      # to avoid cross-toolchain artifacts.
      run: |
        echo "Running MSRV check with locked flag. If generate-lockfile produced a lock compatible with MSRV, this will succeed."
        CARGO_TARGET_DIR=target/msrv rustup run 1.71.0 cargo check --locked -p strict-path --lib --verbose

    - name: Run clippy with MSRV (library only)
      run: |
        CARGO_TARGET_DIR=target/msrv rustup run 1.71.0 cargo clippy --locked -p strict-path --lib --all-features -- -D warnings

    - name: Run clippy with MSRV (no features)
      run: |
        CARGO_TARGET_DIR=target/msrv rustup run 1.71.0 cargo clippy --locked -p strict-path --lib --no-default-features -- -D warnings

    - name: Test library with MSRV (all features)
      run: |
        CARGO_TARGET_DIR=target/msrv rustup run 1.71.0 cargo test --locked -p strict-path --lib --all-features
